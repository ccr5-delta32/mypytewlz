#!/usr/bin/python

''' Bjorn Pieper, Dec-07 2015, MPIPZ Cologne.
    tped and tfam from SNPs for arbitrary regions.
'''

from subprocess import call
from sys import exit, argv
from getopt import gnu_getopt, GetoptError
from random import normalvariate

def TPEDTFAM(vCHR, vPOS5, vPOS3, vOUTPUT, vPHEN, vFILTER, vEXCLUDE):

  path = '/biodata/dep_tsiantis/common/Bjorn/Ch190_database/SNP_tables_Ch190/'
  composite1 = '$2>=' + str(vPOS5) + ' && $2<=' + str(vPOS3)
  print 'writing temporary SNP subset'
  with open('.snp2tpedtfam_temp', 'w') as outfile:
    call(['awk', composite1, path + vCHR + '_Ch190_SNP_newVar'], stdout=outfile)

## Load SNP data
  print 'loading SNP data'
  with open(path + vCHR + '_Ch190_SNP_newVar', 'r') as getheader:
    snps_header = [ x.strip('\n') for x in getheader.readline().split('\t') ]
  with open('.snp2tpedtfam_temp', 'r') as SNPs:
    snps = [ [ x.strip('\n') for x in y.split('\t') ] for y in SNPs ]

  strains = [ x.strip('\n') for x in snps_header if x not in ['chromosome', 'position'] + vEXCLUDE ]
  current = [[] for x in strains]
  positions = []
  
  if len(vPHEN) == 0: 
    print 'generating normally distributed random phenotypic data with mean 1 and sigma 0.25'
    vPHEN = [ [x, max(0, normalvariate(1, 0.25))] for x in strains] # cap at 0 just in case to prevent negative numbers
  else:
    with open(vPHEN, 'r') as PHEN:
      vPHEN = [[x.strip('\n') for x in y.split('\t')] for y in PHEN]
      vPHEN.sort(key=lambda z: strains.index(z[0]))

  if not len(vPHEN) == len(strains):
    exit('ERROR: ' + str(len(vPHEN)) + ' phenotypic observations provided yet ' + str(len(strains)) + ' accessions included!')
  
  print 'processing SNP data'
  for x in range(len(snps)-1):
    positions.append(snps[x][1])
    for y in strains:
      if vFILTER == True:
        if snps[x][snps_header.index(y)] not in ['A', 'G', 'C', 'T', 'N']:
          snps[x][snps_header.index(y)] = 'N'
      current[strains.index(y)].append(snps[x][snps_header.index(y)])
  print 'writing tfam file'
  with open(vOUTPUT + '.tfam', 'wb') as output:
    counter = 1
    for x in strains:
      output.write('\t'.join([str(1), str(counter), '0', '0', '0', str(vPHEN[strains.index(x)][1])]) + '\n')
      counter += 1
  print 'writing acc file'
  with open(vOUTPUT + '.acc', 'wb') as output:
    counter = 1
    for x in strains:
      output.write(str(counter) + '\t' + x + '\n')
      counter += 1
  print 'writing tped file'
  with open(vOUTPUT + '.tped', 'wb') as output:
    for x in positions:
      output.write('\t'.join( [ str(1), ''.join([vCHR, '_', str(x)]),\
                                '0', str(x), '\t'.join\
                               ([''.join([y, '\t', y]) for y in [z[positions.index(x)]\
                                 for z in current]]) ]  ) + '\n')
  print 'cleaning up'
  call([ 'rm', '.snp2tpedtfam_temp' ])
  print 'Done'

def WRITEACC():
  with\
  open('/biodata/dep_tsiantis/common/Bjorn/Ch190_database/SNP_tables_Ch190/Chr1_Ch190_SNP_newVar',\
       'r') as ACC:
    accessions = [x.strip('\n') for x in ACC.readline().split('\t') if x not in ['chromosome', 'position']]
  with open('accession_names.txt', 'wb') as ACCOUT:
    for accname in accessions:
      ACCOUT.write(accname + '\n')

def HELP():
  print 'example:\n\tsnp2tpedtfam -c Chr1 -5 5000 -3 12500 -f -o fastac1 -p /home/johnny/phenotypes.tbl -x Ox wa jap\n'
  print '-h\tgive this help massage'
  print '-n\twrite accession names as they occur in the SNP table to a file'
  print '-c\tchromosome [eg. Chr1] <required>'
  print '-5\t5\' position <required>'
  print '-3\t3\' position <required>'
  print '-f\tconvert ambiguous base calls to \'N\' [omit for default (do not filter)] <optional>'
  print '-o\toutput file name. <required>\n\tDo not provide a file extension; '\
        'three files are produced:\n\t(1) a tped file (.tped)\n\t(2) a tfam '\
        'file with random phenotype if none was provided (.tfam)\n\t(3) an '\
        'ordered list of included accessions (.acc)'
  print '-p\tphenotypic data. <optional>\n\tA TAB separated file with a column '\
        'of accession names and a column of phenotypes. Ordering\n\tof the '\
        'accessions is not important but the names must be exactly as in the '\
        'SNP table (see option -n).\n\tIf none is provided normally distri'\
        'buted data with mean 1 and sigma 0.25 will be generated.'
  print '-x\taccessions to exclude [multiple possible when separated by white '\
        'space]\n\tThis option must be provided last!!!'

def main(argv):
  vCHR = ''
  vPOS5 = ''
  vPOS3 = ''
  vOUTPUT = ''
  vEXCLUDE = []
  vFILTER = False
  vPHEN = ''
  exopt = 9
  try:
    opts, args = gnu_getopt(argv,"hnc:5:3:fp:o:x:")
    if not opts: exit(HELP())
  except GetoptError:
    print 'example:\n\tsnp2tpedtfam [-h] -c Chr1 -5 5000 -3 12500 -f -o fastac1 -p /home/johnny/phenotypes.tbl -x Ox wa jap>'
    exit(2)
  for opt, arg in opts:
    if opt == '-h':
      HELP()
      exit()
    if opt == '-n':
      WRITEACC()
      exit('The accession names as they occur in the SNP table have been written to \'accession_names.txt\'')
    elif opt in ("-c"):
      vCHR = arg
    elif opt in ("-5"):
      vPOS5 = arg
    elif opt in ("-3"):
      vPOS3 = arg
    elif opt in ("-f"):
      vFILTER = True
      exopt += 1 
    elif opt in ("-o"):
      vOUTPUT = arg
    elif opt in ("-p"):
      vPHEN = arg
      exopt += 2 
    elif opt in ("-x"):
      vEXCLUDE = [x for x in argv[exopt:]]
  
  TPEDTFAM(vCHR, vPOS5, vPOS3, vOUTPUT, vPHEN, vFILTER, vEXCLUDE)

if __name__ == "__main__":
   main(argv[1:])

