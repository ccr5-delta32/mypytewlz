#!/usr/bin/python
# vim: set ft=python

''' Bjorn Pieper. Cologne, June 2016 '''

from sys import exit, argv
from re import search
from argparse import ArgumentParser

req=False
if '-c' in argv: req=True

p = ArgumentParser(prog='fa2sfs', description='Count polarized site frequency'+\
                   ' classes from a fasta alignment. Only bi-allelic sites '+\
                   'with no missing data are included.')
p.add_argument('-f', metavar='<String>', help='Path to fasta '+\
               'alignment',required=True)
p.add_argument('-l', metavar='<String>', help='Path to list of positions',
               required=req)
p.add_argument('-i', metavar='<String>', help='Path to list of strains to '+\
               'form SFS from (simply one column of strain codes). If omitted'+\
               ' the SFS will be counted for all strains in the aligment')
p.add_argument('-a', metavar='<String>', help='ID of the outgroup in the'+\
               ' aligment', required=True)
p.add_argument('-p', help='Produce an interactive barplot of the SFS',
               action='store_true')
p.add_argument('-o', metavar='<String>', help='Save a plot to pdf, provide '+\
               'the path/filename as an argument')
p.add_argument('-c', help='Output a table with sfs class for each position',
               action='store_true', default=False)

if len(argv) == 1:
    p.print_help()
    exit(0)

args = p.parse_args()

if args.o and not args.o[-4:] == '.pdf':
    args.o = args.o + '.pdf'

if args.l:
    pos = open(args.l).read().split('\n')[:-1]

fsta = open(args.f).read().split('\n')
lab = [i.strip('>') for i in fsta if search('>', i)]
if args.i:
    inc = [i.split('\t', 1)[0] for i in open(args.i).read().split('\n')[:-1]]
else:
    inc = lab
seq = [i for i in fsta if not search('>', i)]
del fsta
inseq = [seq[lab.index(i)] for i in lab if i not in [args.a] and\
        i in inc]
outseq = seq[ [lab.index(i) for i in lab if i in [args.a]][0] ]
del seq
nucl = ['A', 'G', 'C', 'T']

sfs = [0 for i in range(len(inseq)+1)]
if args.c:
    sfs_class = [[],[]]

for i in range(len(inseq[0])):
    if outseq[i] not in nucl: continue
    cseq = [j[i] for j in inseq]
    out = outseq[i]
    iset = list(set(cseq))
    oset = list(set(iset + [out]))
    if len(oset) > 2 or True in [j not in nucl for j in oset]: continue
    if args.c:
        sfs_class[0].append(pos[i])
        sfs_class[1].append(cseq.count(out))

    sfs[ len(sfs)-cseq.count(out)-1 ] += 1

print ' '.join([str(i) for i in sfs])

if args.c:
    with open('.'.join(args.f.split('/')[-1].split('.')[:-1]) +
              '.sfsClass', 'wb') as out:
        for i in range(len(sfs_class[0])):
            out.write(sfs_class[0][i] + '\t' + str(sfs_class[1][i]) + '\n')

if args.i:
    title = 'SFS of strains in ' + args.i.split('/')[-1] +\
            ' for ' + args.f.split('/')[-1]
else:
    title = 'SFS of all strains in ' + args.f.split('/')[-1]

if args.o or args.p:
    from matplotlib import pyplot
    barp = pyplot.bar(map(lambda x:x+0.5, range(len(sfs)-2)), sfs[1:-1],
                      width=1, linewidth=1, color='0.70')
    pyplot.ylim(-0.025 * max(sfs[1:-1]), 1.05 * max(sfs[1:-1]))
    pyplot.xlim(0, len(sfs)-1)
    pyplot.suptitle(title, fontsize=12, fontweight='bold')
    pyplot.xlabel('N derived alleles')
    pyplot.ylabel('Count')
    if args.o:
        from matplotlib.backends.backend_pdf import PdfPages
        o = PdfPages(args.o)
        o.savefig()
        o.close()
    if args.p:
        pyplot.show()
