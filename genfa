#!/usr/bin/env python2
# vim: set ft=python

''' Bjorn Pieper. MPIPZ COlogne, January 23, 2017 (v1); August 2017 (v2).
    genfa is a tool to extract bits of sequence from the big fasta of the
    reference sequence with the assembled chromosomes and assorted unassembled
    scaffolds'''

from argparse import ArgumentParser
from sys import exit, argv
from re import search

req = False
if '-v' in argv:
    req = True
p = ArgumentParser(description='genfa is a tool to produce fasta sequence'+\
                   'for arbitrary regions from the C. hirsuta Ox reference. '+\
                  'It can also produce the sequence for any strain in the '+\
                  ' SNP tables by changing the Ox sequence accordingly.')
p.add_argument('-r', metavar='<String>', help='Path to reference sequence '+\
               'fasta (defaults to chi_v1.fa in /biodata/...)',\
               default='/biodata/dep_tsiantis/common/chigenome/chi_v1.fa')
p.add_argument('-c', metavar='<String>', help='Chromosome or scaffold identi'+\
               'fier (eg. Chr1, or NSCAFA.1031I)', required=True)
p.add_argument('-n', metavar='<Int>', help='5\' position of region to extract',
              required=True, type=int)
p.add_argument('-s', metavar='<Int>', help='3\' position of region to extract',
              required=True, type=int)
p.add_argument('-v', metavar='<String>', help='Path to relevant SNP table',
               required=False)
p.add_argument('-a', metavar='<String>', help='Strain for which to generate' +\
               ' the sequence. use the name as it occurs in the SNP table',
               required=req)
p.add_argument('-o', metavar='<String>', help='Output file name')
p.add_argument('-R', help='Add this flag to return the reverse complement',
               action='store_true', default=False)

if len(argv) == 1:
    p.print_help()
    exit(0)

args = p.parse_args()

if args.R:
    args.n = args.n - 1
else:
    args.s = args.s + 1

seqname = '_' + '_'.join([args.c, str(args.n), str(args.s)])
if not args.o:
    args.o = '_'.join([args.c, args.n, args.s])+'.fa' 
elif args.o and args.o[-3:] is not '.fa' or args.o[-4:] is not '.fas':
    args.o = args.o + '.fa'
    seqname = [args.o[:-3], args.o[:-4]][args.o[-4] == '.'] + '_' + seqname

def readRef (path, CHR, args_5, args_3, revComp=False):
    revDict = {'A':'T', 'G':'C', 'C':'G', 'T':'A', 'N':'N'}
    seq = []
    handle = open(path, 'r')
    while True:
        line = handle.readline().strip('\n')
        if search('>'+CHR, line):
            line = handle.readline().strip('\n')
            seq.append(line)
            break
    while not search('>', line):
        line = handle.readline().strip('\n')
        seq.append(line)

    seq = ''.join(seq)[args_5:args_3]

    if revComp:
        seq = ''.join([ revDict[i] for i in reversed(seq) ])

    return seq

def makeStrain(refSeq, args_c, args_n, args_s, args_R, args_v, args_a):
    revDict = {'A':'T', 'G':'C', 'C':'G', 'T':'A', 'N':'N', 'Y':'R', 'R':'Y',
               'S':'S', 'W':'W', 'K':'M', 'M':'K'}
    sub = []
    snp = open(args.v, 'r')
    header = snp.readline().strip('\n').split('\t')
    if args_a not in header:
        exit(args_a + ' does not occur in the SNP table!')
    while True:
        line = snp.readline()
        if line == '': break
        if not search('^'+args_c, line): continue
        if int(search('\t(\d+)\t', line).group(1)) >= args_n and\
           int(search('\t(\d+)\t', line).group(1)) <= args_s:
            sub.append(line.strip('\n').split('\t'))
        if int(search('\t(\d+)\t', line).group(1)) > args_s: break
    if len(sub) < 1:
        print('No SNPs found in the requested region for ' + args_a +\
              '.\nMake sure the SNP table contains data for this chromo'+\
              'some if this is unexpected.')
        return refSeq
    posall = [(int(i[1]) - args_n, i[header.index(args_a)]) for i in sub if\
              i[header.index(args_a)] != i[header.index('Ox')]]
    if args_R:
        posall = [(abs(i[0] - (args_s-args_n)), revDict[i[1]]) for i in posall]
    altseq = []
    for I, J in enumerate(refSeq):
        if I in [i[0] for i in posall]:
            altseq.append([i[1] for i in posall][[i[0] for i in
                                                  posall].index(I)])
        else:
            altseq.append(J)

    return ''.join(altseq)

refseq = readRef(args.r, args.c, args.n, args.s, args.R)

if args.v:
    altseq = makeStrain(refseq, args.c, args.n, args.s, args.R, args.v, args.a)

with open(args.o, 'wb') as out:
    out.write('>' + 'Ox' + seqname + '\n')
    out.write(refseq + '\n')
    if args.v:
        out.write('>' + args.a + seqname + '\n')
        out.write(altseq)
