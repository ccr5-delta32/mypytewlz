#!/usr/bin/env python2

'''  Bjorn Pieper. MPIPZ Cologne. April 2016. Version 1  '''

from re import search
import sys
from argparse import ArgumentParser, RawTextHelpFormatter

## set up command line arg parsing
if '-s' in [x for x in sys.argv]:
    req1 = False; req2 = True    
else:
    req1 = True; req2 = False
p = ArgumentParser(prog='fa2dadi', formatter_class=RawTextHelpFormatter,
                   description='fa2dadi is a tool to turn FASTA alignments into'+\
                   ' dadi input format.\nIt will only include'+\
                   ' bi-allelic SNPs, in the context of the\nselected'\
                   ' populations plus the outgroup.')
p.add_argument('-a',  metavar='alignment', help='FASTA alignment <required'+\
               ' for dadi>', required=req1)
p.add_argument('-o', metavar='outgroup', help='Name of the outgroup <required'+\
               ' for dadi>', required=req1)
p.add_argument('-p', metavar='positions', help='List with true physical '+\
               'positions of the nucleotides\nin case it is a SNP alignment')
p.add_argument('-l', metavar='poplist', help='Population list <always '+\
               'required>\na list of at least 2 columns with:\n'+\
               '   i) the sequence identifiers exactly as they appear\n'+\
               '      in the FASTA, with or without the leading \'>\'\n'+\
               '  ii) some sort of population enumerator\n', required=True)
p.add_argument('-lcol', metavar='seqid', help='Column number in population '+\
               'list that has the\nsequence indentifiers.'+\
               ' Defaults to first column', type=int,
                required=req1, default=[None, 1][req1])
p.add_argument('-pcol', metavar='popid', help='Column number in population '+\
               'list that has the\npopulation enumerator <required if -s>.'+\
               ' Defaults\nto second column' , type=int, 
               required=req2, default=[None, 2][req1])
p.add_argument('-s',  help='Show available populations (or any set of '+
               'unique\nvalues for that matter) in the column specified\n'+
               'with the -pcol argument', action='store_true') 
p.add_argument('-out', help='Output filename prefix. Defaults to the names\n'+\
               'of the included populations')
p.add_argument('-P', metavar='pop', help='Population(s) to include, '+\
               'seperated by whitespace\n<required for dadi>', nargs='*',
               required=req1)
p._optionals.title='arguments'

if len(sys.argv) == 1:
    p.print_help()
    sys.exit(0)

args = p.parse_args()

## open data and prepare for further processing
popinfo = [x.split('\t') for x in\
           open(args.l).read().split('\n')][:-1]
pops = list(set([x[args.pcol-1] for x in popinfo[1:]]))
if args.s: 
    print '\n'.join(['unique values in column ' + str(args.pcol) + ' of file ' +
                     args.l] +  pops); sys.exit(0)
seqs = open(args.a).read().split('\n')
label = [x.strip('>') for x in seqs if search('>', x)]
seq = [x for x in seqs if not search('>', x)]
del seqs
out = label.index(args.o)
if args.p: pos = open(args.p).read().split('\n')
else: pos = range(1, len(seq[0])+1)

seq_pop_indx = [[label.index(j.strip('>')) for j in 
                 [x[args.lcol-1] for x in popinfo if
                  x[args.pcol-1] == POP]] for POP in  pops]  
pop_indx = [pops.index(i) for i in args.P]

def allSeqIndex(seq_pop_indx, pop_indx):
    ## I take a nested list of lists with indices of the sequences
    ## for each population, and the indices of the desired population(s)
    ## to make dadi of. I then return a 1-dimensional list with those 
    ## sequence indices
    if len(pop_indx) == 1: return seq_pop_indx[pop_indx[0]]
    else:
        comb = seq_pop_indx[pop_indx[0]]
        for i in range(1, len(pop_indx)):
            comb = comb + seq_pop_indx[pop_indx[i]]
    return comb

def countInOut(allele, seq, i, seq_pop_indx, pop_indx):
    ## I will count occurence of 'allele' at position i in all seqs
    ## belonging to the pop specified by pop_indx of seq_pop_indx
    return [seq[x][i] for x in seq_pop_indx[pop_indx]].count(allele)

## output file name
if args.out: fOUT = args.out + '.dadi'
else: fOUT = '_'.join(args.P) + '.dadi'

## make dadi
with open(fOUT, 'wb') as OUT:
    OUT.write('\t'.join(['Ingroup', 'Outgroup', 'Allele1'] + 
                        ['pop'+str(i) for i in range(1, len(args.P)+1)] +
                        ['Allele2'] + ['pop'+str(i) for i in 
                                       range(1, len(args.P)+1)] +
                        ['Gene', 'Position']) + '\n')
    for i in range(len(seq[0])):
        allseq = [seq[j][i] for j in allSeqIndex(seq_pop_indx, pop_indx) + [out]]
        allset = list(set(allseq))
        if len(allset) != 2: continue
        outAllele = seq[out][i]
        inAllele = [ j for j in allset if j not in outAllele ][0]
        OUT.write('\t'.join(['-'+inAllele+'-', '-'+outAllele+'-', inAllele] +\
                             [str(countInOut(inAllele, seq, i, 
                                         seq_pop_indx, j)) for j in pop_indx]+
                            [outAllele] + [str(countInOut(outAllele, seq, i, 
                                                      seq_pop_indx, j)) for j in
                                                      pop_indx]+\
                  ['chr', str(pos[i])]) + '\n')
